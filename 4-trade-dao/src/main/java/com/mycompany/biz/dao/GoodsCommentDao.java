/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.dao;

import java.util.List;

import com.mycompany.biz.domain.GoodsComment;
import org.springframework.dao.DataAccessException;
import org.stategen.framework.lite.PageList;
import org.stategen.framework.lite.IdGenerateService;

/**
 * GoodsCommentDao
 * @author StageGen.org
 * <pre>
 * database table: demo_goods_comment
 * database table comments: GoodsComment
 * This file is generated by <tt>dalgenx</tt>, a DAL (Data Access Layer)
 *
 * 该类仅可以修改引用
 * </pre>
 */
public interface GoodsCommentDao {

	/**
    <pre>
    &#64;ApiParam() &#64;RequestParam(required = false) String commentsId,
    &#64;ApiParam() &#64;RequestParam(required = false) String goodsId,
    &#64;ApiParam() &#64;RequestParam(required = false) String comments,
    &#64;ApiParam() &#64;RequestParam(required = false) String userName,
    &#64;ApiParam() &#64;RequestParam(required = false) Date discussTime,
    &#64;ApiParam() &#64;RequestParam(required = false) Integer score
    ,&#64;ApiParam(hidden = true) GoodsComment goodsComment
    
    </pre>
	 * 
	 * sql:insert into demo_goods_comment ( create_time , update_time , delete_flag , comments_id , goods_id , comments , user_name , discuss_time , score ) VALUES (CURRENT_TIMESTAMP(6),CURRENT_TIMESTAMP(6),0,?,?,?,?,?,?)
	 */
	public GoodsComment insert(GoodsComment goodsComment, IdGenerateService<String> idGenerateService) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("commentsId") &#64;RequestParam(required = false) String commentsId    
    </pre>
	 * 
	 * sql:UPDATE demo_goods_comment a SET a.delete_flag = 1 , a.update_time = CURRENT_TIMESTAMP(6) where a.delete_flag = 0 and a.comments_id = ?
	 */
	public String delete(String commentsId) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam() &#64;RequestParam(required = false) String goodsId,
    &#64;ApiParam() &#64;RequestParam(required = false) String comments,
    &#64;ApiParam() &#64;RequestParam(required = false) String userName,
    &#64;ApiParam() &#64;RequestParam(required = false) Date discussTime,
    &#64;ApiParam() &#64;RequestParam(required = false) Integer score,
    &#64;ApiParam() &#64;RequestParam(required = false) String commentsId
    ,&#64;ApiParam(hidden = true) GoodsComment goodsComment
    
    </pre>
	 * 
	 * sql:UPDATE demo_goods_comment a SET a.update_time= CURRENT_TIMESTAMP(6) , a.goods_id = ? , a.comments = ? , a.user_name = ? , a.discuss_time = ? , a.score = ? where a.delete_flag = 0 and a.comments_id = ?
	 */
	public GoodsComment update(GoodsComment goodsComment) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("commentsId") &#64;RequestParam(required = false) String commentsId    
    </pre>
	 * 
	 * sql:select a.comments_id, a.goods_id, a.comments, a.user_name, a.discuss_time, a.score, a.create_time, a.update_time, a.delete_flag from demo_goods_comment a where a.delete_flag = 0 and a.comments_id = ?
	 */
	public GoodsComment getGoodsCommentByCommentsId(String commentsId) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam() &#64;RequestParam(required = false) String commentsId,
    &#64;ApiParam() &#64;RequestParam(required = false, name="commentsIds") ArrayList&lt;String&gt; commentsIds,
    &#64;ApiParam() &#64;RequestParam(required = false) String goodsId,
    &#64;ApiParam() &#64;RequestParam(required = false, name="goodsIds") ArrayList&lt;String&gt; goodsIds,
    &#64;ApiParam() &#64;RequestParam(required = false) String userName,
    &#64;ApiParam() &#64;RequestParam(required = false) String userNameLike,
    &#64;ApiParam() &#64;RequestParam(required = false) Date discussTimeMin,
    &#64;ApiParam() &#64;RequestParam(required = false) Date discussTimeMax,
    &#64;ApiParam() &#64;RequestParam(required = false) Integer score,
    &#64;ApiParam() &#64;RequestParam(required = false) Integer scoreMin,
    &#64;ApiParam() &#64;RequestParam(required = false) Integer scoreMax,
    &#64;ApiParam() &#64;RequestParam(required = false) Date createTimeMin,
    &#64;ApiParam() &#64;RequestParam(required = false) Date createTimeMax,
    &#64;ApiParam() &#64;RequestParam(required = false) Date updateTimeMin,
    &#64;ApiParam() &#64;RequestParam(required = false) Date updateTimeMax
    ,&#64;ApiParam(hidden = true) GoodsComment goodsComment
    ,Pagination pagination
    </pre>
	 * 
	 * sql:select a.comments_id, a.goods_id, a.comments, a.user_name, a.discuss_time, a.score, a.create_time, a.update_time, a.delete_flag from demo_goods_comment a where a.delete_flag = 0 and a.comments_id=? and a.comments_id in ( ? ) and a.goods_id=? and a.goods_id in ( ? ) and a.user_name=? and a.user_name like CONCAT('%',?,'%') and a.discuss_time >=? and a.discuss_time <? and a.score=? and a.score >=? and a.score <? and a.create_time >=? and a.create_time <? and a.update_time >=? and a.update_time <? and 0 = 1 order by a.update_time desc, a.create_time desc
	 */
	public PageList<GoodsComment> getPageList(GoodsComment goodsComment, int pageSize, int pageNum) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("commentsId") &#64;RequestParam(required = false, name="commentsIds") ArrayList&lt;String&gt; commentsIds    
    </pre>
	 * 
	 * sql:select a.comments_id, a.goods_id, a.comments, a.user_name, a.discuss_time, a.score, a.create_time, a.update_time, a.delete_flag from demo_goods_comment a where a.delete_flag = 0 and 1=0 and a.comments_id in ( ? ) order by a.update_time desc, a.create_time desc
	 */
	public List<GoodsComment> getGoodsCommentsByCommentsIds(java.util.List<String> commentsIds) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("commentsId") &#64;RequestParam(required = false, name="commentsIds") ArrayList&lt;String&gt; commentsIds    
    </pre>
	 * 
	 * sql:UPDATE demo_goods_comment a SET a.delete_flag = 1 , a.update_time = CURRENT_TIMESTAMP(6) where a.delete_flag = 0 and 1=0 and a.comments_id in ( ? )
	 */
	public java.util.List<String> deleteByCommentsIds(java.util.List<String> commentsIds) throws DataAccessException;
	

}



