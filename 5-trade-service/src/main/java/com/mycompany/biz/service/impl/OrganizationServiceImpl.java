/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.service.impl;

import java.util.Collection;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Function;
import javax.annotation.Resource;

import org.stategen.framework.lite.IIdGenerator;
import org.stategen.framework.lite.IdGenerateService;
import org.stategen.framework.lite.PageList;
import org.stategen.framework.util.ServiceUtil;

import com.mycompany.biz.dao.OrganizationDao;
import com.mycompany.biz.domain.Organization;
import com.mycompany.biz.service.OrganizationService;

/**
 * OrganizationServiceImpl
 * <pre>
 * database table: demo_organization
 * database table comments: 组织架构表 ，用于水平权限  --tree
 * This file is generated by <tt>dalgenx</tt>, a DAL (Data Access Layer)
 *
 * 新生成的类中的方法，只有在不同名的情况下才会被追加到该类下，
 * 因此该类可以修改任何部分
 * </pre>
 */
public class OrganizationServiceImpl implements OrganizationService, IdGenerateService<Long> {

    @Resource
    private IIdGenerator idGenerator;

    @Resource(name = "organizationDao")
    OrganizationDao organizationDao;

    /**
     * 
     * @see com.mycompany.biz.dao.OrganizationDao#insert
     * @see com.mycompany.biz.service.OrganizationService#insert
     */
    @Override
    public Organization insert(Organization organization) {
        return organizationDao.insert(organization, this);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.OrganizationDao#delete
     * @see com.mycompany.biz.service.OrganizationService#delete
     */
    @Override
    public Long delete(Long orgId) {
        return organizationDao.delete(orgId);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.OrganizationDao#update
     * @see com.mycompany.biz.service.OrganizationService#update
     */
    @Override
    public Organization update(Organization organization) {
        return organizationDao.update(organization);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.OrganizationDao#getOrganizationByOrgId
     * @see com.mycompany.biz.service.OrganizationService#getOrganizationByOrgId
     */
    @Override
    public Organization getOrganizationByOrgId(Long orgId) {
        return organizationDao.getOrganizationByOrgId(orgId);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.OrganizationDao#getPageList
     * @see com.mycompany.biz.service.OrganizationService#getPageList
     */
    @Override
    public PageList<Organization> getPageList(Organization organization, int pageSize, int pageNum) {
        return organizationDao.getPageList(organization, pageSize, pageNum);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.OrganizationDao#getOrganizationsByOrgIds
     * @see com.mycompany.biz.service.OrganizationService#getOrganizationsByOrgIds
     */
    @Override
    public List<Organization> getOrganizationsByOrgIds(java.util.List<Long> orgIds) {
        return organizationDao.getOrganizationsByOrgIds(orgIds);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.OrganizationDao#deleteByOrgIds
     * @see com.mycompany.biz.service.OrganizationService#deleteByOrgIds
     */
    @Override
    public java.util.List<Long> deleteByOrgIds(java.util.List<Long> orgIds) {
        return organizationDao.deleteByOrgIds(orgIds);
    }

    /*** 保存organization,有id时更新，没有id时插入,并带回新的id，返回 organization*/
    @Override
    public Organization saveOrganization(Organization organization) {
        if (organization != null) {
            java.lang.Long orgId = organization.getOrgId();
            if (orgId != null) {
                insert(organization);
            } else {
                update(organization);
            }
        }
        return organization;
    }

    /*** 批量保存organizations,有id时更新，没有id时插入,并带回新的id，返回 organizations*/
    @Override
    public List<Organization> saveOrganizations(List<Organization> organizations) {
        for (Organization organization : organizations) {
            this.saveOrganization(organization);
        }
        return organizations;
    }

    @Override
    public <D> void assignBeanTo(Collection<D> dests, Function<? super D, Long> destGetMethod, BiConsumer<D, Organization> destSetMethod) {
        ServiceUtil.interalAssignBeanTo(dests, destGetMethod, destSetMethod, this, OrganizationServiceImpl::getOrganizationsByOrgIds, Organization::getOrgId);
    }

    @Override
    public <D, G> void assignBeansTo(Collection<D> dests, Function<? super D, G> destGetMethod, BiConsumer<D, List<Organization>> destSetMethod, BiConsumer<Organization, List<G>> resultSetQueryIdsFun, Function<? super Organization, G> resultGetGoupIdFun) {
        ServiceUtil.interalAssignBeansTo(dests, destGetMethod, destSetMethod, this, new Organization(), resultSetQueryIdsFun, resultGetGoupIdFun, 100);
    }

    @Override
    public <D> void mergeBeanTo(Collection<D> dests, Function<? super D, Long> destGetMethod) {
        ServiceUtil.interalMergeBeanTo(dests, destGetMethod, this, OrganizationServiceImpl::getOrganizationsByOrgIds, Organization::getOrgId);
    }

    @Override
    public <T> Long generateId(Class<T> bizTagClz) {
        return this.idGenerator.generateId(Long.class, bizTagClz);
    }
}
