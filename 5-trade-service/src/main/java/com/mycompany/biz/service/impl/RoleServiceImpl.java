/*
 * Copyright (c) 2016 - 2116 All Rights Reserved.
 * Powered By [rapid-generator]
 */
package com.mycompany.biz.service.impl;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import javax.annotation.Resource;

import org.stategen.framework.lite.PageList;
import org.stategen.framework.util.CollectionUtil;
import org.stategen.framework.util.ServiceUtil;
import org.stategen.framework.util.StringUtil;

import com.mycompany.biz.dao.RoleDao;
import com.mycompany.biz.domain.Menu;
import com.mycompany.biz.domain.Role;
import com.mycompany.biz.domain.RoleMenu;
import com.mycompany.biz.service.MenuService;
import com.mycompany.biz.service.RoleMenuService;
import com.mycompany.biz.service.RoleService;

/**
 * RoleServiceImpl
 * <pre>
 * database table: role
 * database table comments: Role
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 新生成的类中的方法，只有在不同名的情况下才会被追加到该类下，
 * 因此该类可以修改任何部分
 * </pre>
 */
public class RoleServiceImpl implements RoleService {

    @Resource
    MenuService menuService;

    @Resource
    RoleMenuService roleMenuService;

    @Override
    public List<Menu> getAllMenusWithRoleChecked(String roleId) {
        List<Menu> menus = this.menuService.getMenusByProjectName( null);
        List<Long> menuIds = CollectionUtil.toList(menus, Menu::getMenuId);
        List<RoleMenu> roleMenus = this.roleMenuService.getRoleMenusByMenuIds(menuIds);
        Map<Long, RoleMenu> menuIdRoleMenuMap = CollectionUtil.toMap(roleMenus, RoleMenu::getMenuId);
        for (Menu menu : menus) {
            menu.setRoleId(roleId);
            Long menuId = menu.getMenuId();
            menu.setChecked(menuIdRoleMenuMap.containsKey(menuId));
        }
        return menus;
    }

    //<#--
    @Resource(name = "roleDao")
    RoleDao roleDao;

    /*** 保存role,有id时更新，没有id时插入，返回 role*/
    public Role saveRole(Role role) {
        if (role != null) {
            java.lang.String roleId = role.getRoleId();
            if (StringUtil.isBlank(roleId)) {
                insert(role);
            } else {
                update(role);
            }
        }
        return role;
    }

    /*** 批量保存roles,有id时更新，没有id时插入,并带回新的id，返回 roles*/
    @Override
    public List<Role> saveRoles(List<Role> roles) {
        for (Role role : roles) {
            this.saveRole(role);
        }
        return roles;
    }

    /**
     * 
     * @see com.mycompany.biz.dao.RoleDao#insert
     * @see com.mycompany.biz.service.RoleService#insert
     */
    @Override
    public Role insert(Role role) {
        return roleDao.insert(role);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.RoleDao#update
     * @see com.mycompany.biz.service.RoleService#update
     */
    @Override
    public Role update(Role role) {
        return roleDao.update(role);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.RoleDao#getRoleByRoleId
     * @see com.mycompany.biz.service.RoleService#getRoleByRoleId
     */
    @Override
    public Role getRoleByRoleId(String roleId) {
        return roleDao.getRoleByRoleId(roleId);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.RoleDao#getRolesByRoleIds
     * @see com.mycompany.biz.service.RoleService#getRolesByRoleIds
     */
    @Override
    public List<Role> getRolesByRoleIds(java.util.List<String> roleIds) {
        return roleDao.getRolesByRoleIds(roleIds);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.RoleDao#delete
     * @see com.mycompany.biz.service.RoleService#delete
     */
    @Override
    public String delete(String roleId) {
        return roleDao.delete(roleId);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.RoleDao#deleteByRoleIds
     * @see com.mycompany.biz.service.RoleService#deleteByRoleIds
     */
    @Override
    public List<String> deleteByRoleIds(java.util.List<String> roleIds) {
        return roleDao.deleteByRoleIds(roleIds);
    }

    /**
     * 
     * @see com.mycompany.biz.dao.RoleDao#getPageList
     * @see com.mycompany.biz.service.RoleService#getPageList
     */
    @Override
    public PageList<Role> getPageList(Role role, int pageSize, int pageNum) {
        return roleDao.getPageList(role, pageSize, pageNum);
    }

    @Override
    public <D> void assignBeanTo(Collection<D> dests, Function<? super D, String> destGetMethod, BiConsumer<D, Role> destSetMethod) {
        ServiceUtil.interalAssignBeanTo(dests, destGetMethod, destSetMethod, this, RoleServiceImpl::getRolesByRoleIds, Role::getRoleId);
    }

    @Override
    public <D, G> void assignBeansTo(Collection<D> dests, Function<? super D, G> destGetMethod, BiConsumer<D, List<Role>> destSetMethod, BiConsumer<Role, List<G>> resultSetQueryIdsFun, Function<? super Role, G> resultGetGoupIdFun) {
        ServiceUtil.interalAssignBeansTo(dests, destGetMethod, destSetMethod, this, new Role(), resultSetQueryIdsFun, resultGetGoupIdFun, 100);
    }

    @Override
    public <D> void mergeBeanTo(Collection<D> dests, Function<? super D, String> destGetMethod) {
        ServiceUtil.interalMergeBeanTo(dests, destGetMethod, this, RoleServiceImpl::getRolesByRoleIds, Role::getRoleId);
    }
    //-->
    //
}
