#首先加载 6-web-base中的bootstrap.yml,导入环境设置
spring:
  application:
    name: tradeApp
  main:
    # Spring Boot 2.1 需要设定
    allow-bean-definition-overriding: true
  cloud:
#====================================nacos Config===============================================      
    nacos:
      discovery:
        server-addr:  ${nacos.serverAddr}
        
#====================================sentinel Config===============================================        
    # 使用 Sentinel 作为熔断器
    sentinel:
      transport:
        port: '#{T(util.Net).from(${tradeApp.client.for.sentinel.transport.port:8721})}'   
        dashboard: ${sentinel.transport.dashboard}   
        # 设置Sentinel Nacos数据源配置
      datasource:
        # 配置后报错提示：rule-type没有借误，值大写对应RuleType,转换效率更高
        # 反向持久化到nacos，下次启动，配置 还在,建议下载这个版本的sentinel-dashboard.jar https://blog.csdn.net/oyc619491800/article/details/112206645
        # java -Dnacos.server-addr=localhost:8848 -Dserver.port=8880 -Dcsp.sentinel.dashboard.server=localhost:8880 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-nacos-1.8.0.jar
        flow:
          nacos:
            server-addr: ${nacos.serverAddr}
            dataId: ${spring.application.name}-flow-rules
            groupId: SENTINEL_GROUP
            rule-type: FLOW
        degrade:
          nacos:
            server-addr: ${nacos.serverAddr}
            dataId: ${spring.application.name}-degrade-rules
            groupId: SENTINEL_GROUP
            rule-type: DEGRADE
        system:
          nacos:
            server-addr: ${nacos.serverAddr}
            dataId: ${spring.application.name}-system-rules
            groupId: SENTINEL_GROUP
            rule-type: SYSTEM
        authority:
          nacos:
            server-addr: ${nacos.serverAddr}
            dataId: ${spring.application.name}-authority-rules
            groupId: SENTINEL_GROUP
            rule-type: AUTHORITY
        param-flow:
          nacos:
            server-addr: ${nacos.serverAddr}
            dataId: ${spring.application.name}-param-flow-rules
            groupId: SENTINEL_GROUP
            rule-type: PARAM_FLOW
            
#====================================rocketmq Config===============================================  
    stream:          
      rocketmq:
        binder:
          name-server: 127.0.0.1:9876
          
      function:
        definition: supplier;receive1;receive2;
      bindings:
        receive1-in-0:
          destination: customerId-1
          group: customerId-1-group
        receive2-in-0:
          destination: customerId-2
          group: customerId-2-group          
#      bindings: 
#        # 生产者
#        output:
#          # 指定topic
#          destination: topic-stream
#        customize-output:
#          destination: topic-stream-customize     
#====================================Seata Config===============================================
seata:
  enabled: true
  application-id: ${spring.application.name}
  #向nacos中注册一个配置 service.vgroupMapping.trade-service-group=default
  #事务群组（可以每个应用独立取名，也可以使用相同的名字）
  tx-service-group: trade-service-group
  registry:
    type: nacos
    nacos:
      server-addr: ${nacos.serverAddr}
      #seata 1.4.0,这个值为空,必须注释掉
      #namespace: 
      cluster: default
  config:
    type: nacos
    nacos:
      #seata 1.4.0,这个值为空,必须注释掉
      #namespace: default
      server-addr: ${nacos.serverAddr}
      group: SEATA_GROUP
  enable-auto-data-source-proxy: true
  data-source-proxy-mode: AT

#====================================server Config===============================================
#server 配置后优先使用  
#server:
#  port: ${tradeApp.port:8080}
#  servlet:
#    context-path: /${spring.application.name}
#  undertow:
#    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
#    io-threads: 4
#    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
#    worker-threads: 20
#    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
#    # 每块buffer的空间大小,越小的空间被利用越充分
#    buffer-size: 1024
#    # 是否分配的直接内存
#    direct-buffers: true
