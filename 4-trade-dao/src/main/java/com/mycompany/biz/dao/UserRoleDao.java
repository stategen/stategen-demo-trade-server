/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.dao;

import java.util.List;

import com.mycompany.biz.domain.UserRole;
import org.springframework.dao.DataAccessException;
import org.stategen.framework.lite.PageList;
import org.stategen.framework.util.IIDGenerator;

/**
 * UserRoleDao
 * <pre>
 * database table: user_role
 * database table comments: UserRole
 * This file is generated by <tt>dalgenx</tt>, a DAL (Data Access Layer)
 *
 * 该类仅可以修改引用
 * </pre>
 */
public interface UserRoleDao {

	/**
    <pre>
    &#64;ApiParam() &#64;RequestParam(required = false) Long id,
    &#64;ApiParam() &#64;RequestParam(required = false) String userId,
    &#64;ApiParam() &#64;RequestParam(required = false) String roleId,
    &#64;ApiParam() &#64;RequestParam(required = false) String roleType
    ,&#64;ApiParam(hidden = true) UserRole userRole
    
    </pre>
	 * 
	 * sql:insert into user_role ( create_time , update_time , delete_flag , id , user_id , role_id , role_type ) VALUES (CURRENT_TIMESTAMP(6),CURRENT_TIMESTAMP(6),0,?,?,?,?)
	 */
	public UserRole insert(UserRole userRole, IIDGenerator<Long> idGenerator) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("id") &#64;RequestParam(required = false) Long id    
    </pre>
	 * 
	 * sql:UPDATE user_role a SET a.delete_flag = 1 , a.update_time = CURRENT_TIMESTAMP(6) where a.delete_flag = 0 and a.id = ?
	 */
	public Long delete(Long id) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam() &#64;RequestParam(required = false) String userId,
    &#64;ApiParam() &#64;RequestParam(required = false) String roleId,
    &#64;ApiParam() &#64;RequestParam(required = false) String roleType,
    &#64;ApiParam() &#64;RequestParam(required = false) Long id
    ,&#64;ApiParam(hidden = true) UserRole userRole
    
    </pre>
	 * 
	 * sql:UPDATE user_role a SET a.update_time= CURRENT_TIMESTAMP(6) , a.user_id = ? , a.role_id = ? , a.role_type = ? where a.delete_flag = 0 and a.id = ?
	 */
	public UserRole update(UserRole userRole) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("id") &#64;RequestParam(required = false) Long id    
    </pre>
	 * 
	 * sql:select a.id, a.user_id, a.role_id, a.role_type, a.create_time, a.update_time, a.delete_flag from user_role a where a.delete_flag = 0 and a.id = ?
	 */
	public UserRole getUserRoleById(Long id) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam() &#64;RequestParam(required = false) Long id,
    &#64;ApiParam() &#64;RequestParam(required = false) Long idMin,
    &#64;ApiParam() &#64;RequestParam(required = false) Long idMax,
    &#64;ApiParam() &#64;RequestParam(required = false) String userId,
    &#64;ApiParam() &#64;RequestParam(required = false, name="userIds") ArrayList&lt;String&gt; userIds,
    &#64;ApiParam() &#64;RequestParam(required = false) String roleId,
    &#64;ApiParam() &#64;RequestParam(required = false, name="roleIds") ArrayList&lt;String&gt; roleIds,
    &#64;ApiParam() &#64;RequestParam(required = false) String roleType,
    &#64;ApiParam() &#64;RequestParam(required = false, name="roleTypes") ArrayList&lt;String&gt; roleTypes,
    &#64;ApiParam() &#64;RequestParam(required = false) Date createTimeMin,
    &#64;ApiParam() &#64;RequestParam(required = false) Date createTimeMax,
    &#64;ApiParam() &#64;RequestParam(required = false) Date updateTimeMin,
    &#64;ApiParam() &#64;RequestParam(required = false) Date updateTimeMax
    ,&#64;ApiParam(hidden = true) UserRole userRole
    ,Pagination pagination
    </pre>
	 * 
	 * sql:select a.id, a.user_id, a.role_id, a.role_type, a.create_time, a.update_time, a.delete_flag from user_role a where a.delete_flag = 0 and a.id=? and a.id >=? and a.id <? and a.user_id=? and a.user_id in ( ? ) and a.role_id=? and a.role_id in ( ? ) and a.role_type=? and a.role_type in ( ? ) and a.create_time >=? and a.create_time <? and a.update_time >=? and a.update_time <? and 0 = 1 order by a.update_time desc, a.create_time desc
	 */
	public PageList<UserRole> getPageList(UserRole userRole, int pageSize, int pageNum) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("id") &#64;RequestParam(required = false, name="ids") ArrayList&lt;Long&gt; ids    
    </pre>
	 * 
	 * sql:select a.id, a.user_id, a.role_id, a.role_type, a.create_time, a.update_time, a.delete_flag from user_role a where a.delete_flag = 0 and 1=0 and a.id in ( ? ) order by a.update_time desc, a.create_time desc
	 */
	public List<UserRole> getUserRolesByIds(java.util.List<Long> ids) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("id") &#64;RequestParam(required = false, name="ids") ArrayList&lt;Long&gt; ids    
    </pre>
	 * 
	 * sql:UPDATE user_role a SET a.delete_flag = 1 , a.update_time = CURRENT_TIMESTAMP(6) where a.delete_flag = 0 and 1=0 and a.id in ( ? )
	 */
	public java.util.List<Long> deleteByIds(java.util.List<Long> ids) throws DataAccessException;
	

}



