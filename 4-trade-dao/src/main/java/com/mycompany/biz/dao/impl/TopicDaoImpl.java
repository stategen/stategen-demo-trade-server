/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import org.stategen.framework.ibatis.util.PageQueryUtils;
import org.stategen.framework.lite.PageList;

import com.mycompany.biz.dao.TopicDao;
import com.mycompany.biz.domain.Topic;

/**
 * TopicDao
 * <pre>
 * database table: demo_topic
 * database table comments: Topic
 * This file is generated by <tt>dalgenx</tt>, a DAL (Data Access Layer)
 *
 * 该类仅可以修改引用
 * </pre>
 */
public class TopicDaoImpl extends SqlDaoSupportBase implements TopicDao {

    /**
	 * 
	 * sql:insert into demo_topic ( create_time , update_time , delete_flag , topic_id , author_id , topic_type , content , title , last_reply_at , good , top , visit_count ) VALUES (CURRENT_TIMESTAMP(6),CURRENT_TIMESTAMP(6),0,?,?,?,?,?,?,?,?,?)
	 */
    public Topic insert(Topic topic) throws DataAccessException {
        if (topic == null) {
            throw new IllegalArgumentException("Can't insert a null data object into db.");
        }
        super.insert("Topic.insert", topic);
        return topic;
    }

    /**
	 * 
	 * sql:UPDATE demo_topic SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and topic_id = ?
	 */
    public String delete(String topicId) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("topicId", topicId);
        super.update("Topic.delete", params);
        return topicId;
    }

    /**
	 * 
	 * sql:UPDATE demo_topic SET update_time= CURRENT_TIMESTAMP(6) , author_id = ? , topic_type = ? , content = ? , title = ? , last_reply_at = ? , good = ? , top = ? , visit_count = ? where delete_flag = 0 and topic_id = ?
	 */
    public Topic update(Topic topic) throws DataAccessException {
        if (topic == null) {
            throw new IllegalArgumentException("Can't update by a null data object.");
        }
        super.update("Topic.update", topic);
        return topic;
    }

    /**
	 * 
	 * sql:select a.topic_id, a.author_id, a.topic_type, a.content, a.title, a.last_reply_at, a.good, a.top, a.visit_count, a.create_time, a.update_time, a.delete_flag from demo_topic a where a.delete_flag = 0 and a.topic_id = ?
	 */
    public Topic getTopicByTopicId(String topicId) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("topicId", topicId);
        return (Topic) super.selectOne("Topic.getTopicByTopicId", params);
    }

    /**
	 * 
	 * sql:select a.topic_id, a.author_id, a.topic_type, a.content, a.title, a.last_reply_at, a.good, a.top, a.visit_count, a.create_time, a.update_time, a.delete_flag from demo_topic a where a.delete_flag = 0 and a.topic_id=? and a.topic_id in ( ? ) and a.author_id=? and a.author_id in ( ? ) and a.topic_type=? and a.topic_type in ( ? ) and a.title=? and a.title like CONCAT('%',?,'%') and a.last_reply_at >=? and a.last_reply_at <? and a.good=? and a.good >=? and a.good <? and a.top=? and a.top >=? and a.top <? and a.visit_count=? and a.visit_count >=? and a.visit_count <? and a.create_time >=? and a.create_time <? and a.update_time >=? and a.update_time <? and 0 = 1 order by a.update_time desc, a.create_time desc
	 */
    public PageList<Topic> getPageList(Topic topic, int pageSize, int pageNum) throws DataAccessException {
        return super.pageQuery("Topic.getPageList", topic, pageNum, pageSize);
    }

    /**
	 * 
	 * sql:select a.topic_id, a.author_id, a.topic_type, a.content, a.title, a.last_reply_at, a.good, a.top, a.visit_count, a.create_time, a.update_time, a.delete_flag from demo_topic a where a.delete_flag = 0 and 1=0 and a.topic_id in ( ? ) order by a.update_time desc, a.create_time desc
	 */
    public List<Topic> getTopicsByTopicIds(java.util.List<String> topicIds) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("topicIds", topicIds);
        return super.selectList("Topic.getTopicsByTopicIds", params);
    }

    /**
	 * 
	 * sql:UPDATE demo_topic SET delete_flag = 1 , update_time = CURRENT_TIMESTAMP(6) where delete_flag = 0 and 1=0 and topic_id in ( ? )
	 */
    public java.util.List<String> deleteByTopicIds(java.util.List<String> topicIds) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("topicIds", topicIds);
        super.update("Topic.deleteByTopicIds", params);
        return topicIds;
    }

    /**
	 * 获取当前回复的数量
	 * sql:SELECT b.topic_id, COUNT(b.reply_id) as replyCount FROM demo_topic_reply b WHERE b.delete_flag = 0 and b.topic_id in ( ? ) and 1=0 GROUP BY b.topic_id
	 */
    public List<Topic> getReplyCounts(java.util.List<String> topicIds) throws DataAccessException {
        Map<String, Object> params = new HashMap<String, Object>(1);
        params.put("topicIds", topicIds);
        return super.selectList("Topic.getReplyCounts", params);
    }
}
