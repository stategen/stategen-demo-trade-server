/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package com.mycompany.biz.dao;

import java.util.List;

import com.mycompany.biz.domain.Region;
import org.springframework.dao.DataAccessException;
import org.stategen.framework.lite.PageList;
import org.stategen.framework.lite.IdGenerateService;

/**
 * RegionDao
 * @author StageGen.org
 * <pre>
 * database table: demo_region
 * database table comments: 全球地区库，采集自腾讯QQ国内+国际版.ADD.JENA.20141221
 * This file is generated by <tt>dalgenx</tt>, a DAL (Data Access Layer)
 *
 * 该类仅可以修改引用
 * </pre>
 */
public interface RegionDao {

	/**
    <pre>
    &#64;ApiParam() &#64;RequestParam(required = false) Long regionId,
    &#64;ApiParam() &#64;RequestParam(required = false) Long parentRegionId,
    &#64;ApiParam() &#64;RequestParam(required = false) String path,
    &#64;ApiParam() &#64;RequestParam(required = false) Integer level,
    &#64;ApiParam() &#64;RequestParam(required = false) RegionType regionType,
    &#64;ApiParam() &#64;RequestParam(required = false) String name,
    &#64;ApiParam() &#64;RequestParam(required = false) String nameEn,
    &#64;ApiParam() &#64;RequestParam(required = false) String namePinyin,
    &#64;ApiParam() &#64;RequestParam(required = false) String code
    ,&#64;ApiParam(hidden = true) Region region
    
    </pre>
	 * 
	 * sql:insert into demo_region ( create_time , update_time , delete_flag , region_id , parent_region_id , path , level , region_type , name , name_en , name_pinyin , code ) VALUES (CURRENT_TIMESTAMP(6),CURRENT_TIMESTAMP(6),0,?,?,?,?,?,?,?,?,?)
	 */
	public Region insert(Region region, IdGenerateService<Long> idGenerateService) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("主键") &#64;RequestParam(required = false) Long regionId    
    </pre>
	 * 
	 * sql:UPDATE demo_region a SET a.delete_flag = 1 , a.update_time = CURRENT_TIMESTAMP(6) where a.delete_flag = 0 and a.region_id = ?
	 */
	public Long delete(Long regionId) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam() &#64;RequestParam(required = false) Long parentRegionId,
    &#64;ApiParam() &#64;RequestParam(required = false) String path,
    &#64;ApiParam() &#64;RequestParam(required = false) Integer level,
    &#64;ApiParam() &#64;RequestParam(required = false) RegionType regionType,
    &#64;ApiParam() &#64;RequestParam(required = false) String name,
    &#64;ApiParam() &#64;RequestParam(required = false) String nameEn,
    &#64;ApiParam() &#64;RequestParam(required = false) String namePinyin,
    &#64;ApiParam() &#64;RequestParam(required = false) String code,
    &#64;ApiParam() &#64;RequestParam(required = false) Long regionId
    ,&#64;ApiParam(hidden = true) Region region
    
    </pre>
	 * 
	 * sql:UPDATE demo_region a SET a.update_time= CURRENT_TIMESTAMP(6) , a.parent_region_id = ? , a.path = ? , a.level = ? , a.region_type = ? , a.name = ? , a.name_en = ? , a.name_pinyin = ? , a.code = ? where a.delete_flag = 0 and a.region_id = ?
	 */
	public Region update(Region region) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("主键") &#64;RequestParam(required = false) Long regionId    
    </pre>
	 * 
	 * sql:select a.region_id, a.parent_region_id, a.path, a.level, a.region_type, a.name, a.name_en, a.name_pinyin, a.code, a.update_time, a.create_time, a.delete_flag from demo_region a where a.delete_flag = 0 and a.region_id = ?
	 */
	public Region getRegionByRegionId(Long regionId) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam() &#64;RequestParam(required = false) Long regionId,
    &#64;ApiParam() &#64;RequestParam(required = false, name="regionIds") ArrayList&lt;Long&gt; regionIds,
    &#64;ApiParam() &#64;RequestParam(required = false) Long parentRegionId,
    &#64;ApiParam() &#64;RequestParam(required = false, name="parentRegionIds") ArrayList&lt;Long&gt; parentRegionIds,
    &#64;ApiParam() &#64;RequestParam(required = false) String path,
    &#64;ApiParam() &#64;RequestParam(required = false) String pathLike,
    &#64;ApiParam() &#64;RequestParam(required = false) Integer level,
    &#64;ApiParam() &#64;RequestParam(required = false) Integer levelMin,
    &#64;ApiParam() &#64;RequestParam(required = false) Integer levelMax,
    &#64;ApiParam() &#64;RequestParam(required = false) RegionType regionType,
    &#64;ApiParam() &#64;RequestParam(required = false, name="regionTypes") ArrayList&lt;RegionType&gt; regionTypes,
    &#64;ApiParam() &#64;RequestParam(required = false) String name,
    &#64;ApiParam() &#64;RequestParam(required = false) String nameLike,
    &#64;ApiParam() &#64;RequestParam(required = false) String nameEn,
    &#64;ApiParam() &#64;RequestParam(required = false) String nameEnLike,
    &#64;ApiParam() &#64;RequestParam(required = false) String namePinyin,
    &#64;ApiParam() &#64;RequestParam(required = false) String namePinyinLike,
    &#64;ApiParam() &#64;RequestParam(required = false) String code,
    &#64;ApiParam() &#64;RequestParam(required = false) String codeLike,
    &#64;ApiParam() &#64;RequestParam(required = false) Date updateTimeMin,
    &#64;ApiParam() &#64;RequestParam(required = false) Date updateTimeMax,
    &#64;ApiParam() &#64;RequestParam(required = false) Date createTimeMin,
    &#64;ApiParam() &#64;RequestParam(required = false) Date createTimeMax
    ,&#64;ApiParam(hidden = true) Region region
    ,Pagination pagination
    </pre>
	 * 
	 * sql:select a.region_id, a.parent_region_id, a.path, a.level, a.region_type, a.name, a.name_en, a.name_pinyin, a.code, a.update_time, a.create_time, a.delete_flag from demo_region a where a.delete_flag = 0 and a.region_id=? and a.region_id in ( ? ) and a.parent_region_id=? and a.parent_region_id in ( ? ) and a.path=? and a.path like CONCAT('%',?,'%') and a.level=? and a.level >=? and a.level <? and a.region_type=? and a.region_type in ( ? ) and a.name=? and a.name like CONCAT('%',?,'%') and a.name_en=? and a.name_en like CONCAT('%',?,'%') and a.name_pinyin=? and a.name_pinyin like CONCAT('%',?,'%') and a.code=? and a.code like CONCAT('%',?,'%') and a.update_time >=? and a.update_time <? and a.create_time >=? and a.create_time <? and 0 = 1 order by a.region_id
	 */
	public PageList<Region> getPageList(Region region, int pageSize, int pageNum) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("主键") &#64;RequestParam(required = false, name="regionIds") ArrayList&lt;Long&gt; regionIds    
    </pre>
	 * 
	 * sql:select a.region_id, a.parent_region_id, a.path, a.level, a.region_type, a.name, a.name_en, a.name_pinyin, a.code, a.update_time, a.create_time, a.delete_flag from demo_region a where a.delete_flag = 0 and 1=0 and a.region_id in ( ? ) order by a.region_id
	 */
	public List<Region> getRegionsByRegionIds(java.util.List<Long> regionIds) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("主键") &#64;RequestParam(required = false, name="regionIds") ArrayList&lt;Long&gt; regionIds    
    </pre>
	 * 
	 * sql:UPDATE demo_region a SET a.delete_flag = 1 , a.update_time = CURRENT_TIMESTAMP(6) where a.delete_flag = 0 and 1=0 and a.region_id in ( ? )
	 */
	public java.util.List<Long> deleteByRegionIds(java.util.List<Long> regionIds) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("父ID") &#64;RequestParam(required = false, name="parentRegionIds") ArrayList&lt;Long&gt; parentRegionIds    
    </pre>
	 * 
	 * sql:select a.region_id, a.parent_region_id, a.region_type, a.name, a.name_en, a.name_pinyin, a.code, not exists( SELECT b.region_id from demo_region b where b.parent_region_id=a.region_id) as isLeaf from demo_region a where a.delete_flag = 0 and a.parent_region_id in ( ? ) and a.parent_region_id =0
	 */
	public List<Region> getRegionOptions(java.util.List<Long> parentRegionIds) throws DataAccessException;
	
	/**
    <pre>
    &#64;ApiParam("主键") &#64;RequestParam(required = false, name="regionIds") ArrayList&lt;Long&gt; regionIds    
    </pre>
	 * 
	 * sql:select a.region_id, a.parent_region_id, a.region_type, a.name, a.name_en, a.name_pinyin, a.code, not exists( SELECT b.region_id from demo_region b where b.parent_region_id=a.region_id) as isLeaf from demo_region a where a.delete_flag = 0 and 1=0 and a.region_id in ( ? ) order by a.region_id
	 */
	public List<Region> getRegionsWithIsLeafByRegionIds(java.util.List<Long> regionIds) throws DataAccessException;
	

}



